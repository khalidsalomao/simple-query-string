if(!expect)var expect=require("chai").expect;if(!assert)var assert=require("chai").assert;if(!simpleQueryString)var simpleQueryString=require("../src/simplequerystring.js");if(!_)var _=require("lodash");describe("simpleQueryString()",function(){"use strict";it("exists",function(){expect(simpleQueryString).to.be.a("object")}),it("parse validation: empty",function(){expect(simpleQueryString.parse("")).to.be.a("object"),expect(simpleQueryString.parse()).to.be.a("object"),expect(simpleQueryString.parse(null)).to.be.a("object")}),it("parse validation: full url without query string",function(){var e=simpleQueryString.parse("http://example.org");expect(e).to.be.a("object"),expect(_.keys(e).length).to.equal(0),e=simpleQueryString.parse("http://example.org/teste"),expect(e).to.be.a("object"),expect(_.keys(e).length).to.equal(0),e=simpleQueryString.parse("//example.org/teste"),expect(e).to.be.a("object"),expect(_.keys(e).length).to.equal(0),e=simpleQueryString.parse("//example.org/teste#anchor"),expect(e).to.be.a("object"),expect(_.keys(e).length).to.equal(0)}),it("parse validation: with anchor",function(){var e=simpleQueryString.parse("http://example.org?var=val#anchor");expect(e["var"]).to.equal("val")}),it("parse validation: with anchor partial url",function(){var e=simpleQueryString.parse("var=val#anchor");expect(e["var"]).to.equal("val")}),it("parse validation: parameters as array",function(){var e=simpleQueryString.parse("my=1&my=2&k1=v1&my=3&my=4");expect(e.k1).to.equal("v1"),expect(e.my.length).to.equal(4),assert.strictEqual(e.my[2],"3")}),it("stringify validation: boolean",function(){var e=simpleQueryString.stringify({p1:!0,p2:!1});expect(e).to.equal("p1=true&p2=false")}),it("stringify validation: numeric",function(){var e=simpleQueryString.stringify({p0:0,p1:1,p2:2});assert.strictEqual(e,"p0=0&p1=1&p2=2")}),it("stringify validation: array",function(){var e=simpleQueryString.stringify({my:[1,2,3,4]});expect(e).to.equal("my=1&my=2&my=3&my=4"),e=simpleQueryString.stringify({a1:[1,5,6],a2:[2],a3:[3],a4:[4]}),assert.strictEqual(e,"a1=1&a1=5&a1=6&a2=2&a3=3&a4=4"),e=simpleQueryString.stringify({k1:"hi",a1:[1,5,6],a2:[2],k2:2,a3:[3],a4:[4]}),assert.strictEqual(e,"k1=hi&a1=1&a1=5&a1=6&a2=2&k2=2&a3=3&a4=4")}),it("stringify validation: null/empty input",function(){assert.isOk(""===simpleQueryString.stringify()),assert.isOk(""===simpleQueryString.stringify(null)),assert.isOk(""===simpleQueryString.stringify({}))}),it("stringify validation: ignore functions",function(){var e=simpleQueryString.stringify({p0:function(){return 0}});assert.strictEqual(e,"")}),it("stringify validation: ignore prototype properties",function(){var e=function(){};e.prototype.p1=function(){return 0},e.prototype.p2="test";var t=new e;assert.strictEqual(t.p2,"test");var r=simpleQueryString.stringify(t);assert.strictEqual(r,"")})});